// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schat/stored_conversation.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StoredConversation struct {
	HashParticipant []uint32          `protobuf:"varint,1,rep,packed,name=hashParticipant,proto3" json:"hashParticipant,omitempty"`
	EncryptKey      string            `protobuf:"bytes,2,opt,name=encryptKey,proto3" json:"encryptKey,omitempty"`
	Message         []string          `protobuf:"bytes,3,rep,name=message,proto3" json:"message,omitempty"`
	DecryptKey      map[string]string `protobuf:"bytes,4,rep,name=decryptKey,proto3" json:"decryptKey,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *StoredConversation) Reset()         { *m = StoredConversation{} }
func (m *StoredConversation) String() string { return proto.CompactTextString(m) }
func (*StoredConversation) ProtoMessage()    {}
func (*StoredConversation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ee60e9b9ca9456f, []int{0}
}
func (m *StoredConversation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoredConversation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoredConversation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoredConversation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoredConversation.Merge(m, src)
}
func (m *StoredConversation) XXX_Size() int {
	return m.Size()
}
func (m *StoredConversation) XXX_DiscardUnknown() {
	xxx_messageInfo_StoredConversation.DiscardUnknown(m)
}

var xxx_messageInfo_StoredConversation proto.InternalMessageInfo

func (m *StoredConversation) GetHashParticipant() []uint32 {
	if m != nil {
		return m.HashParticipant
	}
	return nil
}

func (m *StoredConversation) GetEncryptKey() string {
	if m != nil {
		return m.EncryptKey
	}
	return ""
}

func (m *StoredConversation) GetMessage() []string {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *StoredConversation) GetDecryptKey() map[string]string {
	if m != nil {
		return m.DecryptKey
	}
	return nil
}

func init() {
	proto.RegisterType((*StoredConversation)(nil), "chengyu97.schat.schat.StoredConversation")
	proto.RegisterMapType((map[string]string)(nil), "chengyu97.schat.schat.StoredConversation.DecryptKeyEntry")
}

func init() { proto.RegisterFile("schat/stored_conversation.proto", fileDescriptor_1ee60e9b9ca9456f) }

var fileDescriptor_1ee60e9b9ca9456f = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4f, 0x4b, 0xc3, 0x30,
	0x1c, 0x86, 0x97, 0xd5, 0x3f, 0x2c, 0x22, 0x93, 0xa0, 0x50, 0x3c, 0xc4, 0xe2, 0x29, 0xa7, 0x14,
	0xf4, 0x30, 0x27, 0x78, 0x59, 0xf5, 0xe4, 0x45, 0xba, 0xd3, 0xbc, 0x48, 0x96, 0x85, 0xb6, 0xe8,
	0x92, 0x92, 0xa4, 0xc3, 0x7c, 0x0b, 0xf1, 0x53, 0x79, 0xdc, 0xd1, 0xa3, 0xb4, 0x5f, 0x44, 0xda,
	0xea, 0x28, 0xd3, 0x4b, 0xc8, 0xef, 0x4d, 0x9e, 0xf0, 0xf0, 0x06, 0x9e, 0x19, 0x9e, 0x32, 0x1b,
	0x1a, 0xab, 0xb4, 0x58, 0x3c, 0x71, 0x25, 0x57, 0x42, 0x1b, 0x66, 0x33, 0x25, 0x69, 0xae, 0x95,
	0x55, 0xe8, 0x84, 0xa7, 0x42, 0x26, 0xae, 0x18, 0x8f, 0x68, 0x73, 0xb5, 0x5d, 0xcf, 0xdf, 0xfb,
	0x10, 0x4d, 0x1b, 0x28, 0xea, 0x30, 0x88, 0xc0, 0x61, 0xca, 0x4c, 0xfa, 0xc0, 0xb4, 0xcd, 0x78,
	0x96, 0x33, 0x69, 0x7d, 0x10, 0x78, 0xe4, 0x30, 0xde, 0x8e, 0x11, 0x86, 0x50, 0x48, 0xae, 0x5d,
	0x6e, 0xef, 0x85, 0xf3, 0xfb, 0x01, 0x20, 0x83, 0xb8, 0x93, 0x20, 0x1f, 0xee, 0x2f, 0x85, 0x31,
	0x2c, 0x11, 0xbe, 0x17, 0x78, 0x64, 0x10, 0xff, 0x8e, 0x68, 0x06, 0xe1, 0x42, 0x6c, 0xc8, 0x9d,
	0xc0, 0x23, 0x07, 0x17, 0x63, 0xfa, 0xaf, 0x26, 0xfd, 0xab, 0x48, 0x6f, 0x37, 0xec, 0x9d, 0xb4,
	0xda, 0xc5, 0x9d, 0xc7, 0x4e, 0x6f, 0xe0, 0x70, 0xeb, 0x18, 0x1d, 0x41, 0xef, 0x59, 0x38, 0x1f,
	0x34, 0x82, 0xf5, 0x16, 0x1d, 0xc3, 0xdd, 0x15, 0x7b, 0x29, 0xc4, 0x8f, 0x74, 0x3b, 0x5c, 0xf7,
	0xaf, 0xc0, 0x64, 0xf2, 0x51, 0x62, 0xb0, 0x2e, 0x31, 0xf8, 0x2a, 0x31, 0x78, 0xab, 0x70, 0x6f,
	0x5d, 0xe1, 0xde, 0x67, 0x85, 0x7b, 0x8f, 0x24, 0xc9, 0x6c, 0x5a, 0xcc, 0x29, 0x57, 0xcb, 0x30,
	0xaa, 0x4d, 0x67, 0xc5, 0x78, 0x14, 0x4e, 0xa3, 0xba, 0xfb, 0xd7, 0xb0, 0xfd, 0x03, 0xeb, 0x72,
	0x61, 0xe6, 0x7b, 0x4d, 0xed, 0x97, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x01, 0xd3, 0xad,
	0x99, 0x01, 0x00, 0x00,
}

func (m *StoredConversation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredConversation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoredConversation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DecryptKey) > 0 {
		for k := range m.DecryptKey {
			v := m.DecryptKey[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintStoredConversation(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStoredConversation(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStoredConversation(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Message) > 0 {
		for iNdEx := len(m.Message) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Message[iNdEx])
			copy(dAtA[i:], m.Message[iNdEx])
			i = encodeVarintStoredConversation(dAtA, i, uint64(len(m.Message[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.EncryptKey) > 0 {
		i -= len(m.EncryptKey)
		copy(dAtA[i:], m.EncryptKey)
		i = encodeVarintStoredConversation(dAtA, i, uint64(len(m.EncryptKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HashParticipant) > 0 {
		dAtA2 := make([]byte, len(m.HashParticipant)*10)
		var j1 int
		for _, num := range m.HashParticipant {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintStoredConversation(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStoredConversation(dAtA []byte, offset int, v uint64) int {
	offset -= sovStoredConversation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoredConversation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HashParticipant) > 0 {
		l = 0
		for _, e := range m.HashParticipant {
			l += sovStoredConversation(uint64(e))
		}
		n += 1 + sovStoredConversation(uint64(l)) + l
	}
	l = len(m.EncryptKey)
	if l > 0 {
		n += 1 + l + sovStoredConversation(uint64(l))
	}
	if len(m.Message) > 0 {
		for _, s := range m.Message {
			l = len(s)
			n += 1 + l + sovStoredConversation(uint64(l))
		}
	}
	if len(m.DecryptKey) > 0 {
		for k, v := range m.DecryptKey {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStoredConversation(uint64(len(k))) + 1 + len(v) + sovStoredConversation(uint64(len(v)))
			n += mapEntrySize + 1 + sovStoredConversation(uint64(mapEntrySize))
		}
	}
	return n
}

func sovStoredConversation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStoredConversation(x uint64) (n int) {
	return sovStoredConversation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoredConversation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoredConversation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredConversation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredConversation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStoredConversation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HashParticipant = append(m.HashParticipant, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStoredConversation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStoredConversation
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStoredConversation
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.HashParticipant) == 0 {
					m.HashParticipant = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStoredConversation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HashParticipant = append(m.HashParticipant, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HashParticipant", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredConversation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredConversation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredConversation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredConversation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredConversation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredConversation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredConversation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStoredConversation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStoredConversation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecryptKey == nil {
				m.DecryptKey = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStoredConversation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStoredConversation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStoredConversation
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStoredConversation
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStoredConversation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthStoredConversation
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthStoredConversation
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStoredConversation(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStoredConversation
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DecryptKey[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoredConversation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStoredConversation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStoredConversation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStoredConversation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredConversation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredConversation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStoredConversation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStoredConversation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStoredConversation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStoredConversation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStoredConversation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStoredConversation = fmt.Errorf("proto: unexpected end of group")
)
